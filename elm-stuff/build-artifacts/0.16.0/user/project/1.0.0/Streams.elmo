Elm.Streams = Elm.Streams || {};
Elm.Streams.make = function (_elm) {
   "use strict";
   _elm.Streams = _elm.Streams || {};
   if (_elm.Streams.values) return _elm.Streams.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var tag = function (xs) {
      var go = F2(function (n,xs) {
         var _p0 = xs;
         if (_p0.ctor === "[]") {
               return _U.list([]);
            } else {
               return A2($List._op["::"],{ctor: "_Tuple2",_0: n,_1: _p0._0},A2(go,n + 1,_p0._1));
            }
      });
      return A2(go,0,xs);
   };
   var current = function (_p1) {    var _p2 = _p1;return _p2._0;};
   var BiStream = F3(function (a,b,c) {    return {ctor: "BiStream",_0: a,_1: b,_2: c};});
   var updateCurrent = F2(function (newCurrent,_p3) {    var _p4 = _p3;return A3(BiStream,newCurrent,_p4._1,_p4._2);});
   var next = function (_p5) {    var _p6 = _p5;return _p6._0({ctor: "_Tuple0"});};
   var toList = F2(function (_p7,n) {
      var _p8 = _p7;
      if (_U.eq(n,0)) return _U.list([]); else {
            var _p9 = _p8._0({ctor: "_Tuple0"});
            var v = _p9._0;
            var s$ = _p9._1;
            return A2($List._op["::"],v,A2(toList,s$,n - 1));
         }
   });
   var takeNth = F2(function (n,_p10) {
      takeNth: while (true) {
         var _p11 = _p10;
         var _p12 = _p11._0;
         if (_U.eq(n,0)) return $Basics.fst(_p12({ctor: "_Tuple0"})); else {
               var _v6 = n - 1,_v7 = $Basics.snd(_p12({ctor: "_Tuple0"}));
               n = _v6;
               _p10 = _v7;
               continue takeNth;
            }
      }
   });
   var Stream = function (a) {    return {ctor: "Stream",_0: a};};
   var nats = function () {
      var f = function (n) {    return Stream(function (_p13) {    var _p14 = _p13;return {ctor: "_Tuple2",_0: n,_1: f(n + 1)};});};
      return f(1);
   }();
   var cycle = F2(function (xs,def) {
      var dict = $Dict.fromList(tag(xs));
      var l = $List.length(xs);
      var safeGet = function (i) {    return A2($Maybe.withDefault,def,A2($Dict.get,A2($Basics._op["%"],i,l),dict));};
      var f = function (n) {    return Stream(function (_p15) {    var _p16 = _p15;return {ctor: "_Tuple2",_0: safeGet(n),_1: f(n + 1)};});};
      return f(0);
   });
   var map = F2(function (f,s) {
      var _p17 = next(s);
      var v = _p17._0;
      var s$ = _p17._1;
      return Stream(function (_p18) {    var _p19 = _p18;return {ctor: "_Tuple2",_0: f(v),_1: A2(map,f,s$)};});
   });
   var integers = A3(BiStream,0,A2(map,function (n) {    return 0 - n;},nats),nats);
   var biStream = F2(function (xs,def) {
      var _p20 = xs;
      if (_p20.ctor === "[]") {
            return A3(BiStream,def,A2(cycle,_U.list([]),def),A2(cycle,_U.list([]),def));
         } else {
            var dict = $Dict.fromList(tag(xs));
            var l = $List.length(xs);
            var safeGet = function (i) {    return A2($Maybe.withDefault,def,A2($Dict.get,A2($Basics._op["%"],i,l),dict));};
            var rightStr = function (n) {
               return Stream(function (_p21) {    var _p22 = _p21;return {ctor: "_Tuple2",_0: safeGet(n),_1: rightStr(n + 1)};});
            };
            var leftStr = function (n) {
               return Stream(function (_p23) {    var _p24 = _p23;return {ctor: "_Tuple2",_0: safeGet(l - n),_1: leftStr(n + 1)};});
            };
            return A3(BiStream,_p20._0,leftStr(1),rightStr(1));
         }
   });
   var test2 = A2(biStream,_U.list(["blibli","blouloub","blublu"]),"");
   var left = function (_p25) {
      var _p26 = _p25;
      var newRight = Stream(function (_p27) {    var _p28 = _p27;return {ctor: "_Tuple2",_0: _p26._0,_1: _p26._2};});
      var _p29 = next(_p26._1);
      var newCurrent = _p29._0;
      var newLeft = _p29._1;
      return A3(BiStream,newCurrent,newLeft,newRight);
   };
   var right = function (_p30) {
      var _p31 = _p30;
      var newLeft = Stream(function (_p32) {    var _p33 = _p32;return {ctor: "_Tuple2",_0: _p31._0,_1: _p31._1};});
      var _p34 = next(_p31._2);
      var newCurrent = _p34._0;
      var newRight = _p34._1;
      return A3(BiStream,newCurrent,newLeft,newRight);
   };
   var goTo = F2(function (bs,p) {
      goTo: while (true) if (p(current(bs))) return bs; else {
            var _v18 = right(bs),_v19 = p;
            bs = _v18;
            p = _v19;
            continue goTo;
         }
   });
   return _elm.Streams.values = {_op: _op
                                ,takeNth: takeNth
                                ,toList: toList
                                ,cycle: cycle
                                ,next: next
                                ,biStream: biStream
                                ,current: current
                                ,left: left
                                ,right: right
                                ,goTo: goTo
                                ,updateCurrent: updateCurrent};
};